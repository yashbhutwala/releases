apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: auth-server
  name: auth-server
  namespace: ${NAMESPACE}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: cos-server
  name: cos-server
  namespace: ${NAMESPACE}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: issue-server
  name: issue-server
  namespace: ${NAMESPACE}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: jobs-controller-service
  name: jobs-controller-service
  namespace: ${NAMESPACE}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: jobs-service
  name: jobs-service
  namespace: ${NAMESPACE}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: taxonomy-server
  name: taxonomy-server
  namespace: ${NAMESPACE}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: tds-code-analysis
  name: tds-code-analysis
  namespace: ${NAMESPACE}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: tools-deprecate-job
  name: tools-deprecate-job
  namespace: ${NAMESPACE}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: tools-sync-job
  name: tools-sync-job
  namespace: ${NAMESPACE}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: triage-command-handler
  name: triage-command-handler
  namespace: ${NAMESPACE}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: triage-query
  name: triage-query
  namespace: ${NAMESPACE}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: vinyl-server
  name: vinyl-server
  namespace: ${NAMESPACE}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: web-core
  name: web-core
  namespace: ${NAMESPACE}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: web-help
  name: web-help
  namespace: ${NAMESPACE}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    environment: ${ENVIRONMENT_NAME}
  name: ${ENVIRONMENT_NAME}-gatekeeper-manager
  namespace: ${NAMESPACE}
rules:
- apiGroups:
  - batch
  - extensions
  resources:
  - jobs
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - pods
  - pods/log
  verbs:
  - get
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    environment: ${ENVIRONMENT_NAME}
  name: k8s-jobs-manager
  namespace: ${NAMESPACE}
rules:
- apiGroups:
  - batch
  - extensions
  resources:
  - jobs
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - pods
  - pods/log
  verbs:
  - get
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: leaderElector
  name: leaderElector
  namespace: ${NAMESPACE}
rules:
- apiGroups:
  - ""
  - extensions
  resources:
  - endpoints
  verbs:
  - create
  - delete
  - get
  - patch
  - update
- apiGroups:
  - ""
  - extensions
  resources:
  - namespaces
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    environment: ${ENVIRONMENT_NAME}
  name: k8s-jobs-manager
  namespace: ${NAMESPACE}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: k8s-jobs-manager
subjects:
- kind: ServiceAccount
  name: jobs-service
  namespace: ${NAMESPACE}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: leaderElector
  name: leaderElector
  namespace: ${NAMESPACE}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: leaderElector
subjects:
- kind: ServiceAccount
  name: triage-query
  namespace: ${NAMESPACE}
- kind: ServiceAccount
  name: triage-command-handler
  namespace: ${NAMESPACE}
- kind: ServiceAccount
  name: tds-code-analysis
  namespace: ${NAMESPACE}
- kind: ServiceAccount
  name: issue-server
  namespace: ${NAMESPACE}
- kind: ServiceAccount
  name: cos-server
  namespace: ${NAMESPACE}
- kind: ServiceAccount
  name: auth-server
  namespace: ${NAMESPACE}
---
apiVersion: v1
data:
  request.json: |-
    [
      {
        "secretName": "certificate-ca",
        "configuration": {
          "commonName": "Polaris CA",
          "organization": ["Synopsys"],
          "country": ["US"]
        },
        "type": "ca",
        "children": [
          {
            "secretName": "polaris-webhook-client-certs",
            "configuration": {
              "commonName": "Polaris Notification Webhook"
            },
            "type": "client",
            "children": null
          }
        ]
      }
    ]
kind: ConfigMap
metadata:
  labels:
    environment: ${ENVIRONMENT_NAME}
  name: certificate-config
  namespace: ${NAMESPACE}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: auth-server
  name: auth-server
  namespace: ${NAMESPACE}
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  - name: admin
    port: 8081
    targetPort: 8081
  selector:
    environment: ${ENVIRONMENT_NAME}
    service: auth-server
---
apiVersion: v1
kind: Service
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: cos-server
  name: cos-server
  namespace: ${NAMESPACE}
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  - name: admin
    port: 8081
    targetPort: 8081
  selector:
    environment: ${ENVIRONMENT_NAME}
    service: cos-server
---
apiVersion: v1
kind: Service
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: issue-server
  name: issue-server
  namespace: ${NAMESPACE}
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  - name: admin
    port: 8081
    targetPort: 8081
  selector:
    environment: ${ENVIRONMENT_NAME}
    service: issue-server
---
apiVersion: v1
kind: Service
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: jobs-controller-service
  name: jobs-controller-service
  namespace: ${NAMESPACE}
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    environment: ${ENVIRONMENT_NAME}
    service: jobs-controller-service
---
apiVersion: v1
kind: Service
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: jobs-service
  name: jobs-service
  namespace: ${NAMESPACE}
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    environment: ${ENVIRONMENT_NAME}
    service: jobs-service
---
apiVersion: v1
kind: Service
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: taxonomy-server
  name: taxonomy-server
  namespace: ${NAMESPACE}
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  - name: admin
    port: 8081
    targetPort: 8081
  selector:
    environment: ${ENVIRONMENT_NAME}
    service: taxonomy-server
---
apiVersion: v1
kind: Service
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: tds-code-analysis
  name: tds-code-analysis
  namespace: ${NAMESPACE}
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  - name: admin
    port: 8081
    targetPort: 8081
  selector:
    environment: ${ENVIRONMENT_NAME}
    service: tds-code-analysis
---
apiVersion: v1
kind: Service
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: triage-command-handler
  name: triage-command-handler
  namespace: ${NAMESPACE}
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  - name: admin
    port: 8081
    targetPort: 8081
  selector:
    environment: ${ENVIRONMENT_NAME}
    service: triage-command-handler
---
apiVersion: v1
kind: Service
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: triage-query
  name: triage-query
  namespace: ${NAMESPACE}
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  - name: admin
    port: 8081
    targetPort: 8081
  selector:
    environment: ${ENVIRONMENT_NAME}
    service: triage-query
---
apiVersion: v1
kind: Service
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: vinyl-server
  name: vinyl-server
  namespace: ${NAMESPACE}
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  - name: admin
    port: 8081
    targetPort: 8081
  selector:
    environment: ${ENVIRONMENT_NAME}
    service: vinyl-server
---
apiVersion: v1
kind: Service
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: web-core
  name: web-core
  namespace: ${NAMESPACE}
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    environment: ${ENVIRONMENT_NAME}
    service: web-core
---
apiVersion: v1
kind: Service
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: web-help
  name: web-help
  namespace: ${NAMESPACE}
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    environment: ${ENVIRONMENT_NAME}
    service: web-help
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: auth-server
  name: auth-server
  namespace: ${NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      environment: ${ENVIRONMENT_NAME}
      service: auth-server
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        chart: swip
        chartVersion: 0.0.6268
        component: swip
        componentVersion: 0.0.6268
        environment: ${ENVIRONMENT_NAME}
        service: auth-server
      name: auth-server
    spec:
      containers:
      - env:
        - name: LOGGING_LEVEL
          value: INFO
        - name: ESJC_LOGGING_LEVEL
          value: INFO
        - name: SWIP_ENVIRONMENT_NAME
          value: ${ENVIRONMENT_NAME}
        - name: SWIP_ROOT_DOMAIN
          value: ${POLARIS_ROOT_DOMAIN}
        - name: SWIP_SERVICE_NAME
          value: auth-server
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POLARIS_ENVIRONMENT_NAME
          value: ${ENVIRONMENT_NAME}
        - name: POLARIS_ROOT_DOMAIN
          value: ${POLARIS_ROOT_DOMAIN}
        - name: POLARIS_SERVICE_NAME
          value: auth-server
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MONGODB_HOST
          value: mongodb
        - name: MONGODB_PORT
          value: "27017"
        - name: EVENT_STORE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: EVENT_STORE_ADDR
          value: eventstore.$(EVENT_STORE_NAMESPACE).svc.cluster.local
        - name: EVENT_STORE_ADMIN_USERNAME
          value: admin
        - name: EVENT_STORE_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: swip-eventstore-admin-creds
        - name: EVENT_STORE_WRITER_USERNAME
          value: writer
        - name: EVENT_STORE_WRITER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: swip-eventstore-writer-creds
        - name: EVENT_STORE_READER_USERNAME
          value: reader
        - name: EVENT_STORE_READER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: swip-eventstore-reader-creds
        - name: SWIP_VAULT_ADDRESS
          value: https://polaris-db-vault:8200
        - name: VAULT_CACERT
          value: /var/run/secrets/vault/server/ca.crt
        - name: VAULT_CLIENT_KEY
          value: /var/run/secrets/vault/server/tls.key
        - name: VAULT_CLIENT_CERT
          value: /var/run/secrets/vault/server/tls.crt
        - name: SMTP_HOST
          valueFrom:
            configMapKeyRef:
              key: host
              name: polaris-smtp
        - name: SMTP_PORT
          valueFrom:
            configMapKeyRef:
              key: port
              name: polaris-smtp
        - name: SMTP_PASSWORD
          valueFrom:
            secretKeyRef:
              key: passwd
              name: polaris-smtp
        - name: SMTP_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: polaris-smtp
        - name: SMTP_SENDER_EMAIL
          value: ${SMTP_SENDER_EMAIL}
        - name: SMTP_TLS_MODE
          value: ${SMTP_TLS_MODE}
        - name: SMTP_TLS_CHECK_SERVER_IDENTITY
          value: ${SMTP_TLS_CHECK_SERVER_IDENTITY}
        - name: SMTP_TLS_TRUSTED_HOSTS
          value: ${SMTP_TLS_TRUSTED_HOSTS}
        image: gcr.io/snps-polaris-onprem-dev/swip_auth-server-onprem:1.7.105
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 4
          httpGet:
            path: /liveness
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 30
          timeoutSeconds: 5
        name: auth-server
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 4
          httpGet:
            path: /readiness
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 30
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 750m
            memory: 2Gi
          requests:
            cpu: 200m
            memory: 1500Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/run/secrets/vault/server
          name: vault-server
          readOnly: true
      - args:
        - --election=auth-server
        - --election-namespace=$(LEADER_ELECTOR_NAMESPACE)
        - --http=0.0.0.0:4040
        env:
        - name: LEADER_ELECTOR_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: k8s.gcr.io/leader-elector:0.5
        imagePullPolicy: Always
        name: leader-election
        ports:
        - containerPort: 4040
          name: http
          protocol: TCP
        resources:
          limits:
            cpu: 100m
            memory: 256Mi
          requests:
            cpu: 50m
            memory: 50Mi
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      - name: ${IMAGE_PULL_SECRETS}
      initContainers:
      - args:
        - --http-readiness-check-urls=http://eventstore.$(POD_NAMESPACE).svc.cluster.local:2113,https://polaris-db-vault:8200/v1/sys/health?standbycode=204&uninitcode=204&
        - --postgres-database=postgres
        - --postgres-host=$(POSTGRES_HOST)
        - --postgres-password=$(POSTGRESQL_PASSWORD)
        - --postgres-port=$(POSTGRES_PORT)
        - --postgres-user=$(POSTGRESQL_USER)
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_HOST
              name: postgresql-config
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_PORT
              name: postgresql-config
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_USER
              name: postgresql-config
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_PASSWORD
              name: postgresql-config
        - name: POSTGRES_SSL_MODE
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_SSL_MODE
              name: postgresql-config
        image: gcr.io/snps-polaris-onprem-dev/polaris-init:1.0.0
        imagePullPolicy: Always
        name: polaris-init
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        runAsNonRoot: true
        runAsUser: 5000
      serviceAccount: auth-server
      terminationGracePeriodSeconds: 30
      volumes:
      - name: vault-server
        secret:
          secretName: auth-server-tls-certificate
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: cos-server
  name: cos-server
  namespace: ${NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      environment: ${ENVIRONMENT_NAME}
      service: cos-server
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        chart: swip
        chartVersion: 0.0.6268
        component: swip
        componentVersion: 0.0.6268
        environment: ${ENVIRONMENT_NAME}
        service: cos-server
      name: cos-server
    spec:
      containers:
      - env:
        - name: POSTGRES_SSL_MODE
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_SSL_MODE
              name: postgresql-config
        - name: LOGGING_LEVEL
          value: INFO
        - name: ESJC_LOGGING_LEVEL
          value: INFO
        - name: SWIP_ENVIRONMENT_NAME
          value: ${ENVIRONMENT_NAME}
        - name: SWIP_ROOT_DOMAIN
          value: ${POLARIS_ROOT_DOMAIN}
        - name: SWIP_SERVICE_NAME
          value: cos-server
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POLARIS_ENVIRONMENT_NAME
          value: ${ENVIRONMENT_NAME}
        - name: POLARIS_ROOT_DOMAIN
          value: ${POLARIS_ROOT_DOMAIN}
        - name: POLARIS_SERVICE_NAME
          value: cos-server
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_HOST
              name: postgresql-config
        - name: PGHOST
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_HOST
              name: postgresql-config
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_PORT
              name: postgresql-config
        - name: PGPORT
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_PORT
              name: postgresql-config
        - name: CLOUDSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_PASSWORD
              name: postgresql-config
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_PASSWORD
              name: postgresql-config
        - name: CLOUDSQL_USERNAME
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_USER
              name: postgresql-config
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_USER
              name: postgresql-config
        - name: EVENT_STORE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: EVENT_STORE_ADDR
          value: eventstore.$(EVENT_STORE_NAMESPACE).svc.cluster.local
        - name: EVENT_STORE_ADMIN_USERNAME
          value: admin
        - name: EVENT_STORE_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: swip-eventstore-admin-creds
        - name: EVENT_STORE_WRITER_USERNAME
          value: writer
        - name: EVENT_STORE_WRITER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: swip-eventstore-writer-creds
        - name: EVENT_STORE_READER_USERNAME
          value: reader
        - name: EVENT_STORE_READER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: swip-eventstore-reader-creds
        - name: SWIP_VAULT_ADDRESS
          value: https://polaris-db-vault:8200
        - name: VAULT_CACERT
          value: /var/run/secrets/vault/client/ca.crt
        - name: VAULT_CLIENT_KEY
          value: /var/run/secrets/vault/client/tls.key
        - name: VAULT_CLIENT_CERT
          value: /var/run/secrets/vault/client/tls.crt
        image: gcr.io/snps-polaris-onprem-dev/swip_cos-server:1.6.2046
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 4
          httpGet:
            path: /liveness
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 30
        name: cos-server
        ports:
        - containerPort: 8080
          protocol: TCP
        readinessProbe:
          failureThreshold: 4
          httpGet:
            path: /readiness
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 30
        resources:
          limits:
            cpu: 750m
            memory: 2Gi
          requests:
            cpu: 200m
            memory: 1500Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/run/secrets/vault/client
          name: vault-client
          readOnly: true
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      - name: ${IMAGE_PULL_SECRETS}
      initContainers:
      - args:
        - --http-readiness-check-urls=http://auth-server.$(POD_NAMESPACE).svc.cluster.local:80/readiness
        - --postgres-database=postgres
        - --postgres-host=$(POSTGRES_HOST)
        - --postgres-password=$(POSTGRESQL_PASSWORD)
        - --postgres-port=$(POSTGRES_PORT)
        - --postgres-user=$(POSTGRESQL_USER)
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_HOST
              name: postgresql-config
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_PORT
              name: postgresql-config
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_USER
              name: postgresql-config
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_PASSWORD
              name: postgresql-config
        - name: POSTGRES_SSL_MODE
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_SSL_MODE
              name: postgresql-config
        image: gcr.io/snps-polaris-onprem-dev/polaris-init:1.0.0
        imagePullPolicy: Always
        name: polaris-init
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        runAsNonRoot: true
        runAsUser: 5000
      serviceAccount: cos-server
      terminationGracePeriodSeconds: 30
      volumes:
      - name: vault-client
        secret:
          secretName: auth-client-tls-certificate
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: issue-server
  name: issue-server
  namespace: ${NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      environment: ${ENVIRONMENT_NAME}
      service: issue-server
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        chart: swip
        chartVersion: 0.0.6268
        component: swip
        componentVersion: 0.0.6268
        environment: ${ENVIRONMENT_NAME}
        service: issue-server
      name: issue-server
    spec:
      containers:
      - env:
        - name: POSTGRES_SSL_MODE
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_SSL_MODE
              name: postgresql-config
        - name: TDS_LOOKUP
          value: 10b78709-8156-447e-ac28-8669e461f0c9:code-analysis:Coverity
        - name: LOGGING_LEVEL
          value: INFO
        - name: ESJC_LOGGING_LEVEL
          value: INFO
        - name: SWIP_ENVIRONMENT_NAME
          value: ${ENVIRONMENT_NAME}
        - name: SWIP_ROOT_DOMAIN
          value: ${POLARIS_ROOT_DOMAIN}
        - name: SWIP_SERVICE_NAME
          value: issue-server
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POLARIS_ENVIRONMENT_NAME
          value: ${ENVIRONMENT_NAME}
        - name: POLARIS_ROOT_DOMAIN
          value: ${POLARIS_ROOT_DOMAIN}
        - name: POLARIS_SERVICE_NAME
          value: issue-server
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MONGODB_HOST
          value: mongodb
        - name: MONGODB_PORT
          value: "27017"
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_HOST
              name: postgresql-config
        - name: PGHOST
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_HOST
              name: postgresql-config
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_PORT
              name: postgresql-config
        - name: PGPORT
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_PORT
              name: postgresql-config
        - name: CLOUDSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_PASSWORD
              name: postgresql-config
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_PASSWORD
              name: postgresql-config
        - name: CLOUDSQL_USERNAME
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_USER
              name: postgresql-config
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_USER
              name: postgresql-config
        - name: EVENT_STORE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: EVENT_STORE_ADDR
          value: eventstore.$(EVENT_STORE_NAMESPACE).svc.cluster.local
        - name: EVENT_STORE_ADMIN_USERNAME
          value: admin
        - name: EVENT_STORE_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: swip-eventstore-admin-creds
        - name: EVENT_STORE_WRITER_USERNAME
          value: writer
        - name: EVENT_STORE_WRITER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: swip-eventstore-writer-creds
        - name: EVENT_STORE_READER_USERNAME
          value: reader
        - name: EVENT_STORE_READER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: swip-eventstore-reader-creds
        - name: SWIP_VAULT_ADDRESS
          value: https://polaris-db-vault:8200
        - name: VAULT_CACERT
          value: /var/run/secrets/vault/client/ca.crt
        - name: VAULT_CLIENT_KEY
          value: /var/run/secrets/vault/client/tls.key
        - name: VAULT_CLIENT_CERT
          value: /var/run/secrets/vault/client/tls.crt
        image: gcr.io/snps-polaris-onprem-dev/swip_issue-server:1.6.2046
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 4
          httpGet:
            path: /liveness
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 30
        name: issue-server
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 4
          httpGet:
            path: /readiness
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 30
        resources:
          limits:
            cpu: 750m
            memory: 3000Mi
          requests:
            cpu: 150m
            memory: 1024Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/run/secrets/vault/client
          name: vault-client
          readOnly: true
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      - name: ${IMAGE_PULL_SECRETS}
      initContainers:
      - args:
        - --http-readiness-check-urls=http://auth-server.$(POD_NAMESPACE).svc.cluster.local:80/readiness
        - --postgres-database=postgres
        - --postgres-host=$(POSTGRES_HOST)
        - --postgres-password=$(POSTGRESQL_PASSWORD)
        - --postgres-port=$(POSTGRES_PORT)
        - --postgres-user=$(POSTGRESQL_USER)
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_HOST
              name: postgresql-config
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_PORT
              name: postgresql-config
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_USER
              name: postgresql-config
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_PASSWORD
              name: postgresql-config
        - name: POSTGRES_SSL_MODE
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_SSL_MODE
              name: postgresql-config
        image: gcr.io/snps-polaris-onprem-dev/polaris-init:1.0.0
        imagePullPolicy: Always
        name: polaris-init
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        runAsNonRoot: true
        runAsUser: 5000
      serviceAccount: issue-server
      terminationGracePeriodSeconds: 30
      volumes:
      - name: vault-client
        secret:
          secretName: auth-client-tls-certificate
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: jobs-controller-service
  name: jobs-controller-service
  namespace: ${NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      environment: ${ENVIRONMENT_NAME}
      service: jobs-controller-service
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        chart: swip
        chartVersion: 0.0.6268
        component: swip
        componentVersion: 0.0.6268
        environment: ${ENVIRONMENT_NAME}
        service: jobs-controller-service
      name: jobs-controller-service
    spec:
      containers:
      - env:
        - name: POSTGRES_SSL_MODE
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_SSL_MODE
              name: postgresql-config
        - name: LOGGING_LEVEL
          value: INFO
        - name: ESJC_LOGGING_LEVEL
          value: INFO
        - name: SWIP_ENVIRONMENT_NAME
          value: ${ENVIRONMENT_NAME}
        - name: SWIP_ROOT_DOMAIN
          value: ${POLARIS_ROOT_DOMAIN}
        - name: SWIP_SERVICE_NAME
          value: jobs-controller-service
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POLARIS_ENVIRONMENT_NAME
          value: ${ENVIRONMENT_NAME}
        - name: POLARIS_ROOT_DOMAIN
          value: ${POLARIS_ROOT_DOMAIN}
        - name: POLARIS_SERVICE_NAME
          value: jobs-controller-service
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MONGODB_HOST
          value: mongodb
        - name: MONGODB_PORT
          value: "27017"
        - name: SWIP_UPLOAD_SERVER_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: access_key
              name: swip-tools-minio
        - name: SWIP_UPLOAD_SERVER_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: secret_key
              name: swip-tools-minio
        - name: SWIP_VAULT_ADDRESS
          value: https://polaris-db-vault:8200
        - name: VAULT_CACERT
          value: /var/run/secrets/vault/client/ca.crt
        - name: VAULT_CLIENT_KEY
          value: /var/run/secrets/vault/client/tls.key
        - name: VAULT_CLIENT_CERT
          value: /var/run/secrets/vault/client/tls.crt
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_HOST
              name: postgresql-config
        - name: PGHOST
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_HOST
              name: postgresql-config
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_PORT
              name: postgresql-config
        - name: PGPORT
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_PORT
              name: postgresql-config
        - name: CLOUDSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_PASSWORD
              name: postgresql-config
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_PASSWORD
              name: postgresql-config
        - name: CLOUDSQL_USERNAME
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_USER
              name: postgresql-config
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_USER
              name: postgresql-config
        - name: CONFIG
          value: controller-config-k8s.yaml
        - name: POSTGRES_DB
          value: jobs-service
        - name: DEPLOYMENT_TYPE
          value: on-prem
        - name: CONNECTION_POOL_LIFETIME_MS
          value: "30000"
        - name: CONNECTION_POOL_MIN_SIZE
          value: "5"
        - name: CONNECTION_POOL_MAX_SIZE
          value: "15"
        image: gcr.io/snps-polaris-onprem-dev/swip_jobs-service:1.7.1012
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 4
          httpGet:
            path: /liveness
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 30
        name: jobs-controller-service
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 4
          httpGet:
            path: /readiness
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 30
        resources:
          limits:
            cpu: 750m
            memory: 1300Mi
          requests:
            cpu: 150m
            memory: 1024Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/run/secrets/vault/client
          name: vault-client
          readOnly: true
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      - name: ${IMAGE_PULL_SECRETS}
      initContainers:
      - args:
        - --http-readiness-check-urls=http://auth-server.$(POD_NAMESPACE).svc.cluster.local:80/readiness
        - --postgres-database=postgres
        - --postgres-host=$(POSTGRES_HOST)
        - --postgres-password=$(POSTGRESQL_PASSWORD)
        - --postgres-port=$(POSTGRES_PORT)
        - --postgres-user=$(POSTGRESQL_USER)
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_HOST
              name: postgresql-config
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_PORT
              name: postgresql-config
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_USER
              name: postgresql-config
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_PASSWORD
              name: postgresql-config
        - name: POSTGRES_SSL_MODE
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_SSL_MODE
              name: postgresql-config
        image: gcr.io/snps-polaris-onprem-dev/polaris-init:1.0.0
        imagePullPolicy: Always
        name: polaris-init
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        runAsNonRoot: true
        runAsUser: 5000
      serviceAccount: jobs-controller-service
      terminationGracePeriodSeconds: 30
      volumes:
      - name: vault-client
        secret:
          secretName: auth-client-tls-certificate
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: jobs-service
  name: jobs-service
  namespace: ${NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      environment: ${ENVIRONMENT_NAME}
      service: jobs-service
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        chart: swip
        chartVersion: 0.0.6268
        component: swip
        componentVersion: 0.0.6268
        environment: ${ENVIRONMENT_NAME}
        service: jobs-service
      name: jobs-service
    spec:
      containers:
      - env:
        - name: POSTGRES_SSL_MODE
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_SSL_MODE
              name: postgresql-config
        - name: SWIP_UPLOAD_DESCRIPTOR_EXPIRATION_PERIOD
          value: 3h
        - name: CLI_FILE_UPLOAD_SIZE_LIMIT
          value: "10737418240"
        - name: LOGGING_LEVEL
          value: INFO
        - name: ESJC_LOGGING_LEVEL
          value: INFO
        - name: SWIP_ENVIRONMENT_NAME
          value: ${ENVIRONMENT_NAME}
        - name: SWIP_ROOT_DOMAIN
          value: ${POLARIS_ROOT_DOMAIN}
        - name: SWIP_SERVICE_NAME
          value: jobs-service
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POLARIS_ENVIRONMENT_NAME
          value: ${ENVIRONMENT_NAME}
        - name: POLARIS_ROOT_DOMAIN
          value: ${POLARIS_ROOT_DOMAIN}
        - name: POLARIS_SERVICE_NAME
          value: jobs-service
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MONGODB_HOST
          value: mongodb
        - name: MONGODB_PORT
          value: "27017"
        - name: SWIP_UPLOAD_SERVER_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: access_key
              name: swip-tools-minio
        - name: SWIP_UPLOAD_SERVER_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: secret_key
              name: swip-tools-minio
        - name: SWIP_VAULT_ADDRESS
          value: https://polaris-db-vault:8200
        - name: VAULT_CACERT
          value: /var/run/secrets/vault/client/ca.crt
        - name: VAULT_CLIENT_KEY
          value: /var/run/secrets/vault/client/tls.key
        - name: VAULT_CLIENT_CERT
          value: /var/run/secrets/vault/client/tls.crt
        - name: NOMAD_ADDR
          value: https://nomad:4646
        - name: NOMAD_CACERT
          value: /etc/nomad/tls/ca.pem
        - name: NOMAD_CLIENT_CERT
          value: /etc/nomad/tls/nomad.pem
        - name: NOMAD_CLIENT_KEY
          value: /etc/nomad/tls/nomad-key.pem
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_HOST
              name: postgresql-config
        - name: PGHOST
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_HOST
              name: postgresql-config
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_PORT
              name: postgresql-config
        - name: PGPORT
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_PORT
              name: postgresql-config
        - name: CLOUDSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_PASSWORD
              name: postgresql-config
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_PASSWORD
              name: postgresql-config
        - name: CLOUDSQL_USERNAME
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_USER
              name: postgresql-config
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_USER
              name: postgresql-config
        - name: INGRESS_NAMESPACE
          value: kube-system
        - name: INGRESS_SERVICE
          value: polaris-infra-nginx-internal-ingress-controller
        - name: ANALYSIS_TYPE
          value: k8s
        - name: OPERATION_MODE
          value: MT
        - name: DEPLOYMENT_TYPE
          value: on-prem
        - name: CONNECTION_POOL_LIFETIME_MS
          value: "30000"
        - name: CONNECTION_POOL_MIN_SIZE
          value: "5"
        - name: CONNECTION_POOL_MAX_SIZE
          value: "15"
        - name: CONFIG
          value: config-k8s.yaml
        - name: TOOLS_CONFIG
          value: /opt/jobs-server/tools-config/processor_image_manifest.json
        - name: POSTGRES_DB
          value: jobs-service
        image: gcr.io/snps-polaris-onprem-dev/swip_jobs-service:1.7.1012
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 4
          httpGet:
            path: /liveness
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 30
        name: jobs-service
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 4
          httpGet:
            path: /readiness
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 30
        resources:
          limits:
            cpu: 750m
            memory: 2Gi
          requests:
            cpu: 200m
            memory: 1500Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/run/secrets/vault/client
          name: vault-client
          readOnly: true
        - mountPath: /opt/jobs-server/license
          name: coverity-license
          readOnly: true
        - mountPath: /opt/jobs-server/tools-config
          name: tools-config
          readOnly: true
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      - name: ${IMAGE_PULL_SECRETS}
      initContainers:
      - args:
        - --http-readiness-check-urls=http://auth-server.$(POD_NAMESPACE).svc.cluster.local:80/readiness
        - --postgres-database=postgres
        - --postgres-host=$(POSTGRES_HOST)
        - --postgres-password=$(POSTGRESQL_PASSWORD)
        - --postgres-port=$(POSTGRES_PORT)
        - --postgres-user=$(POSTGRESQL_USER)
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_HOST
              name: postgresql-config
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_PORT
              name: postgresql-config
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_USER
              name: postgresql-config
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_PASSWORD
              name: postgresql-config
        - name: POSTGRES_SSL_MODE
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_SSL_MODE
              name: postgresql-config
        image: gcr.io/snps-polaris-onprem-dev/polaris-init:1.0.0
        imagePullPolicy: Always
        name: polaris-init
      - env:
        - name: ANALYSIS_TYPE
          value: k8s
        image: gcr.io/snps-polaris-onprem-dev/swip_loadjobs:1.0.2701
        imagePullPolicy: IfNotPresent
        name: load-tools-config
        volumeMounts:
        - mountPath: /opt/jobs-server/tools-config
          name: tools-config
          readOnly: false
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        runAsNonRoot: true
        runAsUser: 5000
      serviceAccount: jobs-service
      terminationGracePeriodSeconds: 30
      volumes:
      - name: vault-client
        secret:
          secretName: auth-client-tls-certificate
      - name: coverity-license
        secret:
          items:
          - key: license
            path: cov_analysis/license.dat
          secretName: coverity-license
      - emptyDir: {}
        name: tools-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: taxonomy-server
  name: taxonomy-server
  namespace: ${NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      environment: ${ENVIRONMENT_NAME}
      service: taxonomy-server
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        chart: swip
        chartVersion: 0.0.6268
        component: swip
        componentVersion: 0.0.6268
        environment: ${ENVIRONMENT_NAME}
        service: taxonomy-server
      name: taxonomy-server
    spec:
      containers:
      - env:
        - name: POSTGRES_SSL_MODE
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_SSL_MODE
              name: postgresql-config
        - name: LOGGING_LEVEL
          value: INFO
        - name: ESJC_LOGGING_LEVEL
          value: INFO
        - name: SWIP_ENVIRONMENT_NAME
          value: ${ENVIRONMENT_NAME}
        - name: SWIP_ROOT_DOMAIN
          value: ${POLARIS_ROOT_DOMAIN}
        - name: SWIP_SERVICE_NAME
          value: taxonomy-server
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POLARIS_ENVIRONMENT_NAME
          value: ${ENVIRONMENT_NAME}
        - name: POLARIS_ROOT_DOMAIN
          value: ${POLARIS_ROOT_DOMAIN}
        - name: POLARIS_SERVICE_NAME
          value: taxonomy-server
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: EVENT_STORE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: EVENT_STORE_ADDR
          value: eventstore.$(EVENT_STORE_NAMESPACE).svc.cluster.local
        - name: EVENT_STORE_ADMIN_USERNAME
          value: admin
        - name: EVENT_STORE_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: swip-eventstore-admin-creds
        - name: EVENT_STORE_WRITER_USERNAME
          value: writer
        - name: EVENT_STORE_WRITER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: swip-eventstore-writer-creds
        - name: EVENT_STORE_READER_USERNAME
          value: reader
        - name: EVENT_STORE_READER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: swip-eventstore-reader-creds
        - name: SWIP_VAULT_ADDRESS
          value: https://polaris-db-vault:8200
        - name: VAULT_CACERT
          value: /var/run/secrets/vault/client/ca.crt
        - name: VAULT_CLIENT_KEY
          value: /var/run/secrets/vault/client/tls.key
        - name: VAULT_CLIENT_CERT
          value: /var/run/secrets/vault/client/tls.crt
        - name: APPLICATION_INSIGHTS_IKEY
          value: placeholder
        image: gcr.io/snps-polaris-onprem-dev/swip_taxonomy-server:1.6.2046
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 4
          httpGet:
            path: /liveness
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 30
        name: taxonomy-server
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 4
          httpGet:
            path: /readiness
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 30
        resources:
          limits:
            cpu: 750m
            memory: 1300Mi
          requests:
            cpu: 50m
            memory: 1024Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/run/secrets/vault/client
          name: vault-client
          readOnly: true
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      - name: ${IMAGE_PULL_SECRETS}
      initContainers:
      - args:
        - --http-readiness-check-urls=http://auth-server.$(POD_NAMESPACE).svc.cluster.local:80/readiness
        - --postgres-database=postgres
        - --postgres-host=$(POSTGRES_HOST)
        - --postgres-password=$(POSTGRESQL_PASSWORD)
        - --postgres-port=$(POSTGRES_PORT)
        - --postgres-user=$(POSTGRESQL_USER)
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_HOST
              name: postgresql-config
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_PORT
              name: postgresql-config
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_USER
              name: postgresql-config
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_PASSWORD
              name: postgresql-config
        - name: POSTGRES_SSL_MODE
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_SSL_MODE
              name: postgresql-config
        image: gcr.io/snps-polaris-onprem-dev/polaris-init:1.0.0
        imagePullPolicy: Always
        name: polaris-init
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        runAsNonRoot: true
        runAsUser: 5000
      serviceAccount: taxonomy-server
      terminationGracePeriodSeconds: 30
      volumes:
      - name: vault-client
        secret:
          secretName: auth-client-tls-certificate
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: tds-code-analysis
  name: tds-code-analysis
  namespace: ${NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      environment: ${ENVIRONMENT_NAME}
      service: tds-code-analysis
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        chart: swip
        chartVersion: 0.0.6268
        component: swip
        componentVersion: 0.0.6268
        environment: ${ENVIRONMENT_NAME}
        service: tds-code-analysis
      name: tds-code-analysis
    spec:
      containers:
      - env:
        - name: POSTGRES_SSL_MODE
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_SSL_MODE
              name: postgresql-config
        - name: LOGGING_LEVEL
          value: INFO
        - name: ESJC_LOGGING_LEVEL
          value: INFO
        - name: SWIP_ENVIRONMENT_NAME
          value: ${ENVIRONMENT_NAME}
        - name: SWIP_ROOT_DOMAIN
          value: ${POLARIS_ROOT_DOMAIN}
        - name: SWIP_SERVICE_NAME
          value: tds-code-analysis
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POLARIS_ENVIRONMENT_NAME
          value: ${ENVIRONMENT_NAME}
        - name: POLARIS_ROOT_DOMAIN
          value: ${POLARIS_ROOT_DOMAIN}
        - name: POLARIS_SERVICE_NAME
          value: tds-code-analysis
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_HOST
              name: postgresql-config
        - name: PGHOST
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_HOST
              name: postgresql-config
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_PORT
              name: postgresql-config
        - name: PGPORT
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_PORT
              name: postgresql-config
        - name: CLOUDSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_PASSWORD
              name: postgresql-config
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_PASSWORD
              name: postgresql-config
        - name: CLOUDSQL_USERNAME
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_USER
              name: postgresql-config
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_USER
              name: postgresql-config
        - name: EVENT_STORE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: EVENT_STORE_ADDR
          value: eventstore.$(EVENT_STORE_NAMESPACE).svc.cluster.local
        - name: EVENT_STORE_ADMIN_USERNAME
          value: admin
        - name: EVENT_STORE_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: swip-eventstore-admin-creds
        - name: EVENT_STORE_WRITER_USERNAME
          value: writer
        - name: EVENT_STORE_WRITER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: swip-eventstore-writer-creds
        - name: EVENT_STORE_READER_USERNAME
          value: reader
        - name: EVENT_STORE_READER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: swip-eventstore-reader-creds
        - name: SWIP_VAULT_ADDRESS
          value: https://polaris-db-vault:8200
        - name: VAULT_CACERT
          value: /var/run/secrets/vault/client/ca.crt
        - name: VAULT_CLIENT_KEY
          value: /var/run/secrets/vault/client/tls.key
        - name: VAULT_CLIENT_CERT
          value: /var/run/secrets/vault/client/tls.crt
        image: gcr.io/snps-polaris-onprem-dev/swip_tds-code-analysis:1.8.240
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 4
          httpGet:
            path: /liveness
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 30
        name: tds-code-analysis
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 4
          httpGet:
            path: /readiness
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 30
        resources:
          limits:
            cpu: 750m
            memory: 3Gi
          requests:
            cpu: 250m
            memory: 2Gi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/run/secrets/vault/client
          name: vault-client
          readOnly: true
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      - name: ${IMAGE_PULL_SECRETS}
      initContainers:
      - args:
        - --http-readiness-check-urls=http://auth-server.$(POD_NAMESPACE).svc.cluster.local:80/readiness
        - --postgres-database=postgres
        - --postgres-host=$(POSTGRES_HOST)
        - --postgres-password=$(POSTGRESQL_PASSWORD)
        - --postgres-port=$(POSTGRES_PORT)
        - --postgres-user=$(POSTGRESQL_USER)
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_HOST
              name: postgresql-config
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_PORT
              name: postgresql-config
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_USER
              name: postgresql-config
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_PASSWORD
              name: postgresql-config
        - name: POSTGRES_SSL_MODE
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_SSL_MODE
              name: postgresql-config
        image: gcr.io/snps-polaris-onprem-dev/polaris-init:1.0.0
        imagePullPolicy: Always
        name: polaris-init
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        runAsNonRoot: true
        runAsUser: 5000
      serviceAccount: tds-code-analysis
      terminationGracePeriodSeconds: 30
      volumes:
      - name: vault-client
        secret:
          secretName: tds-code-analysis-tls-certificate
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: triage-command-handler
  name: triage-command-handler
  namespace: ${NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      environment: ${ENVIRONMENT_NAME}
      service: triage-command-handler
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        chart: swip
        chartVersion: 0.0.6268
        component: swip
        componentVersion: 0.0.6268
        environment: ${ENVIRONMENT_NAME}
        service: triage-command-handler
      name: triage-command-handler
    spec:
      containers:
      - env:
        - name: POSTGRES_SSL_MODE
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_SSL_MODE
              name: postgresql-config
        - name: LOGGING_LEVEL
          value: INFO
        - name: ESJC_LOGGING_LEVEL
          value: INFO
        - name: SWIP_ENVIRONMENT_NAME
          value: ${ENVIRONMENT_NAME}
        - name: SWIP_ROOT_DOMAIN
          value: ${POLARIS_ROOT_DOMAIN}
        - name: SWIP_SERVICE_NAME
          value: triage-command-handler
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POLARIS_ENVIRONMENT_NAME
          value: ${ENVIRONMENT_NAME}
        - name: POLARIS_ROOT_DOMAIN
          value: ${POLARIS_ROOT_DOMAIN}
        - name: POLARIS_SERVICE_NAME
          value: triage-command-handler
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MONGODB_HOST
          value: mongodb
        - name: MONGODB_PORT
          value: "27017"
        - name: EVENT_STORE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: EVENT_STORE_ADDR
          value: eventstore.$(EVENT_STORE_NAMESPACE).svc.cluster.local
        - name: EVENT_STORE_ADMIN_USERNAME
          value: admin
        - name: EVENT_STORE_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: swip-eventstore-admin-creds
        - name: EVENT_STORE_WRITER_USERNAME
          value: writer
        - name: EVENT_STORE_WRITER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: swip-eventstore-writer-creds
        - name: EVENT_STORE_READER_USERNAME
          value: reader
        - name: EVENT_STORE_READER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: swip-eventstore-reader-creds
        - name: SWIP_VAULT_ADDRESS
          value: https://polaris-db-vault:8200
        - name: VAULT_CACERT
          value: /var/run/secrets/vault/client/ca.crt
        - name: VAULT_CLIENT_KEY
          value: /var/run/secrets/vault/client/tls.key
        - name: VAULT_CLIENT_CERT
          value: /var/run/secrets/vault/client/tls.crt
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_HOST
              name: postgresql-config
        - name: PGHOST
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_HOST
              name: postgresql-config
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_PORT
              name: postgresql-config
        - name: PGPORT
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_PORT
              name: postgresql-config
        - name: CLOUDSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_PASSWORD
              name: postgresql-config
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_PASSWORD
              name: postgresql-config
        - name: CLOUDSQL_USERNAME
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_USER
              name: postgresql-config
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_USER
              name: postgresql-config
        image: gcr.io/snps-polaris-onprem-dev/swip_triage-command-handler:1.6.2046
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 4
          httpGet:
            path: /liveness
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 30
        name: triage-command-handler
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 4
          httpGet:
            path: /readiness
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 30
        resources:
          limits:
            cpu: 750m
            memory: 1300Mi
          requests:
            cpu: 100m
            memory: 1024Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/run/secrets/vault/client
          name: vault-client
          readOnly: true
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      - name: ${IMAGE_PULL_SECRETS}
      initContainers:
      - args:
        - --http-readiness-check-urls=http://auth-server.$(POD_NAMESPACE).svc.cluster.local:80/readiness
        - --postgres-database=postgres
        - --postgres-host=$(POSTGRES_HOST)
        - --postgres-password=$(POSTGRESQL_PASSWORD)
        - --postgres-port=$(POSTGRES_PORT)
        - --postgres-user=$(POSTGRESQL_USER)
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_HOST
              name: postgresql-config
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_PORT
              name: postgresql-config
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_USER
              name: postgresql-config
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_PASSWORD
              name: postgresql-config
        - name: POSTGRES_SSL_MODE
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_SSL_MODE
              name: postgresql-config
        image: gcr.io/snps-polaris-onprem-dev/polaris-init:1.0.0
        imagePullPolicy: Always
        name: polaris-init
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        runAsNonRoot: true
        runAsUser: 5000
      serviceAccount: triage-command-handler
      terminationGracePeriodSeconds: 30
      volumes:
      - name: vault-client
        secret:
          secretName: auth-client-tls-certificate
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: triage-query
  name: triage-query
  namespace: ${NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      environment: ${ENVIRONMENT_NAME}
      service: triage-query
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        chart: swip
        chartVersion: 0.0.6268
        component: swip
        componentVersion: 0.0.6268
        environment: ${ENVIRONMENT_NAME}
        service: triage-query
      name: triage-query
    spec:
      containers:
      - env:
        - name: POSTGRES_SSL_MODE
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_SSL_MODE
              name: postgresql-config
        - name: LOGGING_LEVEL
          value: INFO
        - name: ESJC_LOGGING_LEVEL
          value: INFO
        - name: SWIP_ENVIRONMENT_NAME
          value: ${ENVIRONMENT_NAME}
        - name: SWIP_ROOT_DOMAIN
          value: ${POLARIS_ROOT_DOMAIN}
        - name: SWIP_SERVICE_NAME
          value: triage-query
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POLARIS_ENVIRONMENT_NAME
          value: ${ENVIRONMENT_NAME}
        - name: POLARIS_ROOT_DOMAIN
          value: ${POLARIS_ROOT_DOMAIN}
        - name: POLARIS_SERVICE_NAME
          value: triage-query
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MONGODB_HOST
          value: mongodb
        - name: MONGODB_PORT
          value: "27017"
        - name: EVENT_STORE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: EVENT_STORE_ADDR
          value: eventstore.$(EVENT_STORE_NAMESPACE).svc.cluster.local
        - name: EVENT_STORE_ADMIN_USERNAME
          value: admin
        - name: EVENT_STORE_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: swip-eventstore-admin-creds
        - name: EVENT_STORE_WRITER_USERNAME
          value: writer
        - name: EVENT_STORE_WRITER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: swip-eventstore-writer-creds
        - name: EVENT_STORE_READER_USERNAME
          value: reader
        - name: EVENT_STORE_READER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: swip-eventstore-reader-creds
        - name: SWIP_VAULT_ADDRESS
          value: https://polaris-db-vault:8200
        - name: VAULT_CACERT
          value: /var/run/secrets/vault/client/ca.crt
        - name: VAULT_CLIENT_KEY
          value: /var/run/secrets/vault/client/tls.key
        - name: VAULT_CLIENT_CERT
          value: /var/run/secrets/vault/client/tls.crt
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_HOST
              name: postgresql-config
        - name: PGHOST
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_HOST
              name: postgresql-config
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_PORT
              name: postgresql-config
        - name: PGPORT
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_PORT
              name: postgresql-config
        - name: CLOUDSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_PASSWORD
              name: postgresql-config
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_PASSWORD
              name: postgresql-config
        - name: CLOUDSQL_USERNAME
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_USER
              name: postgresql-config
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_USER
              name: postgresql-config
        image: gcr.io/snps-polaris-onprem-dev/swip_triage-query:1.6.2046
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 4
          httpGet:
            path: /liveness
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 30
        name: triage-query
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 4
          httpGet:
            path: /readiness
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 30
        resources:
          limits:
            cpu: 750m
            memory: 1300Mi
          requests:
            cpu: 100m
            memory: 1024Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/run/secrets/vault/client
          name: vault-client
          readOnly: true
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      - name: ${IMAGE_PULL_SECRETS}
      initContainers:
      - args:
        - --http-readiness-check-urls=http://auth-server.$(POD_NAMESPACE).svc.cluster.local:80/readiness
        - --postgres-database=postgres
        - --postgres-host=$(POSTGRES_HOST)
        - --postgres-password=$(POSTGRESQL_PASSWORD)
        - --postgres-port=$(POSTGRES_PORT)
        - --postgres-user=$(POSTGRESQL_USER)
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_HOST
              name: postgresql-config
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_PORT
              name: postgresql-config
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_USER
              name: postgresql-config
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_PASSWORD
              name: postgresql-config
        - name: POSTGRES_SSL_MODE
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_SSL_MODE
              name: postgresql-config
        image: gcr.io/snps-polaris-onprem-dev/polaris-init:1.0.0
        imagePullPolicy: Always
        name: polaris-init
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        runAsNonRoot: true
        runAsUser: 5000
      serviceAccount: triage-query
      terminationGracePeriodSeconds: 30
      volumes:
      - name: vault-client
        secret:
          secretName: auth-client-tls-certificate
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: vinyl-server
  name: vinyl-server
  namespace: ${NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      environment: ${ENVIRONMENT_NAME}
      service: vinyl-server
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        chart: swip
        chartVersion: 0.0.6268
        component: swip
        componentVersion: 0.0.6268
        environment: ${ENVIRONMENT_NAME}
        service: vinyl-server
      name: vinyl-server
    spec:
      containers:
      - env:
        - name: POSTGRES_SSL_MODE
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_SSL_MODE
              name: postgresql-config
        - name: LOGGING_LEVEL
          value: INFO
        - name: ESJC_LOGGING_LEVEL
          value: INFO
        - name: SWIP_ENVIRONMENT_NAME
          value: ${ENVIRONMENT_NAME}
        - name: SWIP_ROOT_DOMAIN
          value: ${POLARIS_ROOT_DOMAIN}
        - name: SWIP_SERVICE_NAME
          value: vinyl-server
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POLARIS_ENVIRONMENT_NAME
          value: ${ENVIRONMENT_NAME}
        - name: POLARIS_ROOT_DOMAIN
          value: ${POLARIS_ROOT_DOMAIN}
        - name: POLARIS_SERVICE_NAME
          value: vinyl-server
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MONGODB_HOST
          value: mongodb
        - name: MONGODB_PORT
          value: "27017"
        - name: SWIP_VAULT_ADDRESS
          value: https://polaris-db-vault:8200
        - name: VAULT_CACERT
          value: /var/run/secrets/vault/client/ca.crt
        - name: VAULT_CLIENT_KEY
          value: /var/run/secrets/vault/client/tls.key
        - name: VAULT_CLIENT_CERT
          value: /var/run/secrets/vault/client/tls.crt
        image: gcr.io/snps-polaris-onprem-dev/swip_vinyl-server:1.6.2046
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 4
          httpGet:
            path: /liveness
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 30
        name: vinyl-server
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 4
          httpGet:
            path: /readiness
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 30
        resources:
          limits:
            cpu: 750m
            memory: 1300Mi
          requests:
            cpu: 100m
            memory: 1024Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/run/secrets/vault/client
          name: vault-client
          readOnly: true
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      - name: ${IMAGE_PULL_SECRETS}
      initContainers:
      - args:
        - --http-readiness-check-urls=http://auth-server.$(POD_NAMESPACE).svc.cluster.local:80/readiness
        - --postgres-database=postgres
        - --postgres-host=$(POSTGRES_HOST)
        - --postgres-password=$(POSTGRESQL_PASSWORD)
        - --postgres-port=$(POSTGRES_PORT)
        - --postgres-user=$(POSTGRESQL_USER)
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_HOST
              name: postgresql-config
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              key: POSTGRESQL_PORT
              name: postgresql-config
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_USER
              name: postgresql-config
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRESQL_PASSWORD
              name: postgresql-config
        - name: POSTGRES_SSL_MODE
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_SSL_MODE
              name: postgresql-config
        image: gcr.io/snps-polaris-onprem-dev/polaris-init:1.0.0
        imagePullPolicy: Always
        name: polaris-init
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        runAsNonRoot: true
        runAsUser: 5000
      serviceAccount: vinyl-server
      terminationGracePeriodSeconds: 30
      volumes:
      - name: vault-client
        secret:
          secretName: auth-client-tls-certificate
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: web-core
  name: web-core
  namespace: ${NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      environment: ${ENVIRONMENT_NAME}
      service: web-core
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        chart: swip
        chartVersion: 0.0.6268
        component: swip
        componentVersion: 0.0.6268
        environment: ${ENVIRONMENT_NAME}
        service: web-core
      name: web-core
    spec:
      containers:
      - command:
        - nginx
        - -g
        - daemon off;
        image: gcr.io/snps-polaris-onprem-dev/web-core:1.7.975
        imagePullPolicy: IfNotPresent
        name: web-core
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 256Mi
          requests:
            cpu: 50m
            memory: 100Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /static
          name: static
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      - name: ${IMAGE_PULL_SECRETS}
      initContainers:
      - command:
        - /bin/sh
        - -c
        - |
          cp -r /static/* /mnt/static
          python /configure.py /mnt/static /config
        env:
        - name: LOGGING_LEVEL
          value: INFO
        - name: ESJC_LOGGING_LEVEL
          value: INFO
        - name: SWIP_ENVIRONMENT_NAME
          value: ${ENVIRONMENT_NAME}
        - name: SWIP_ROOT_DOMAIN
          value: ${POLARIS_ROOT_DOMAIN}
        - name: SWIP_SERVICE_NAME
          value: web-core
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POLARIS_ENVIRONMENT_NAME
          value: ${ENVIRONMENT_NAME}
        - name: POLARIS_ROOT_DOMAIN
          value: ${POLARIS_ROOT_DOMAIN}
        - name: POLARIS_SERVICE_NAME
          value: web-core
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: APP_URL
          value: ${POLARIS_ROOT_DOMAIN}
        - name: DOCS_ROOT_URL
          value: ""
        - name: API_NAMESPACE
          value: common/v0
        - name: API_ORIGIN
          value: /api
        - name: AUTH_ORIGIN
          value: /api/auth
        - name: CSRF_TOKEN
          value: csrf_token
        - name: ACCESS_TOKEN_EXP_SEC
          value: access_token_exp_sec
        - name: LOG_ORIGIN
          value: /api/logs/logging/web-core
        - name: REPORTING_URL
          value: ${REPORTING_URL}
        image: gcr.io/snps-polaris-onprem-dev/web-core:1.7.975
        imagePullPolicy: IfNotPresent
        name: configure-web-core
        resources:
          limits:
            cpu: 500m
            memory: 256Mi
          requests:
            cpu: 50m
            memory: 100Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /mnt/static
          name: static
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        runAsNonRoot: true
        runAsUser: 100
      serviceAccount: web-core
      terminationGracePeriodSeconds: 30
      volumes:
      - emptyDir: {}
        name: static
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: web-help
  name: web-help
  namespace: ${NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      environment: ${ENVIRONMENT_NAME}
      service: web-help
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        chart: swip
        chartVersion: 0.0.6268
        component: swip
        componentVersion: 0.0.6268
        environment: ${ENVIRONMENT_NAME}
        service: web-help
      name: web-help
    spec:
      containers:
      - command:
        - nginx
        - -g
        - daemon off;
        image: gcr.io/snps-polaris-onprem-dev/web-help:1.9.172
        imagePullPolicy: IfNotPresent
        name: web-help
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 256Mi
          requests:
            cpu: 50m
            memory: 100Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /static
          name: static
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      - name: ${IMAGE_PULL_SECRETS}
      initContainers:
      - command:
        - /bin/sh
        - -c
        - |
          cp -r /static/* /mnt/static
          python /configure.py /mnt/static /config
        env:
        - name: LOGGING_LEVEL
          value: INFO
        - name: ESJC_LOGGING_LEVEL
          value: INFO
        - name: SWIP_ENVIRONMENT_NAME
          value: ${ENVIRONMENT_NAME}
        - name: SWIP_ROOT_DOMAIN
          value: ${POLARIS_ROOT_DOMAIN}
        - name: SWIP_SERVICE_NAME
          value: web-help
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POLARIS_ENVIRONMENT_NAME
          value: ${ENVIRONMENT_NAME}
        - name: POLARIS_ROOT_DOMAIN
          value: ${POLARIS_ROOT_DOMAIN}
        - name: POLARIS_SERVICE_NAME
          value: web-help
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: APP_URL
          value: ${POLARIS_ROOT_DOMAIN}
        - name: APP_PATH
          value: help
        - name: CSRF_TOKEN
          value: csrf_token
        - name: ACCESS_TOKEN_EXP_SEC
          value: access_token_exp_sec
        - name: LOG_ORIGIN
          value: /api/logs/logging/web-help
        image: gcr.io/snps-polaris-onprem-dev/web-help:1.9.172
        imagePullPolicy: IfNotPresent
        name: configure-web-help
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 256Mi
          requests:
            cpu: 50m
            memory: 100Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /mnt/static
          name: static
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        runAsNonRoot: true
        runAsUser: 101
      serviceAccount: web-help
      terminationGracePeriodSeconds: 30
      volumes:
      - emptyDir: {}
        name: static
---
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    environment: ${ENVIRONMENT_NAME}
  name: certificate-generator
  namespace: ${NAMESPACE}
spec:
  template:
    metadata:
      labels:
        environment: ${ENVIRONMENT_NAME}
      name: certificate-generator
    spec:
      containers:
      - args:
        - /tmp/cert-generator/request.json
        command:
        - ./gen
        env:
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: gcr.io/snps-polaris-onprem-dev/onprem-cert-generator:latest
        imagePullPolicy: IfNotPresent
        name: certificate-generator
        volumeMounts:
        - mountPath: /tmp/cert-generator
          name: certificate-volume
      imagePullSecrets:
      - name: ${IMAGE_PULL_SECRETS}
      restartPolicy: OnFailure
      serviceAccount: vault-init
      volumes:
      - configMap:
          items:
          - key: request.json
            path: request.json
          name: certificate-config
        name: certificate-volume
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: post-upgrade,post-install
    helm.sh/hook-delete-policy: before-hook-creation
    helm.sh/hook-weight: "2"
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: tools-deprecate-job
  name: tools-deprecate-job-${VERSION}
  namespace: ${NAMESPACE}
spec:
  backoffLimit: 0
  template:
    metadata:
      labels:
        chart: swip
        chartVersion: 0.0.6268
        component: swip
        componentVersion: 0.0.6268
        environment: ${ENVIRONMENT_NAME}
        service: tools-deprecate-job
    spec:
      containers:
      - env:
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: access_key
              name: swip-tools-minio
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: secret_key
              name: swip-tools-minio
        - name: ENVIRONMENT
          value: ${ENVIRONMENT_NAME}
        - name: OPERATION_TYPE
          value: deprecate
        - name: DEPLOYMENT_PLATFORM
          value: on-prem
        image: gcr.io/snps-polaris-onprem-dev/swip_tools_sync:1.0.585
        imagePullPolicy: IfNotPresent
        name: tools-deprecate-job
        volumeMounts:
        - mountPath: /etc/credentials
          name: tools-store-sync
      imagePullSecrets:
      - name: ${IMAGE_PULL_SECRETS}
      initContainers:
      - args:
        - --http-readiness-check-urls=http://download-server.$(POD_NAMESPACE).svc.cluster.local:9000/minio/health/ready
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: gcr.io/snps-polaris-onprem-dev/polaris-init:1.0.0
        imagePullPolicy: Always
        name: polaris-init
      restartPolicy: Never
      volumes:
      - name: tools-store-sync
        secret:
          secretName: tools-store-sync
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: post-upgrade,post-install
    helm.sh/hook-delete-policy: before-hook-creation
    helm.sh/hook-weight: "2"
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: tools-sync-job
  name: tools-sync-job-${VERSION}
  namespace: ${NAMESPACE}
spec:
  backoffLimit: 0
  template:
    metadata:
      labels:
        chart: swip
        chartVersion: 0.0.6268
        component: swip
        componentVersion: 0.0.6268
        environment: ${ENVIRONMENT_NAME}
        service: tools-sync-job
    spec:
      containers:
      - env:
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: access_key
              name: swip-tools-minio
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: secret_key
              name: swip-tools-minio
        - name: ENVIRONMENT
          value: ${ENVIRONMENT_NAME}
        - name: OPERATION_TYPE
          value: sync
        - name: DEPLOYMENT_PLATFORM
          value: on-prem
        - name: GCLOUD_BUCKET
          value: gs://tools-store-master-onprem
        image: gcr.io/snps-polaris-onprem-dev/swip_tools_sync_onprem:1.0.585
        imagePullPolicy: IfNotPresent
        name: tools-sync-job
        volumeMounts:
        - mountPath: /etc/credentials
          name: tools-store-sync
      imagePullSecrets:
      - name: ${IMAGE_PULL_SECRETS}
      initContainers:
      - args:
        - --http-readiness-check-urls=http://download-server.$(POD_NAMESPACE).svc.cluster.local:9000/minio/health/ready
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: gcr.io/snps-polaris-onprem-dev/polaris-init:1.0.0
        imagePullPolicy: Always
        name: polaris-init
      restartPolicy: Never
      serviceAccount: tools-sync-job
      volumes:
      - name: tools-store-sync
        secret:
          secretName: tools-store-sync
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  annotations:
    ingress.kubernetes.io/hsts: "true"
    ingress.kubernetes.io/ssl-redirect: "true"
    kubernetes.io/ingress.class: ${INGRESS_CLASS}
    nginx.ingress.kubernetes.io/enable-access-log: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: 1000m
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/whitelist-source-range: 0.0.0.0/0
  labels:
    chart: swip
    chartVersion: 0.0.6268
    component: swip
    componentVersion: 0.0.6268
    environment: ${ENVIRONMENT_NAME}
    service: swip-ingress
  name: swip-ingress
  namespace: ${NAMESPACE}
spec:
  rules:
  - host: ${POLARIS_ROOT_DOMAIN}
    http:
      paths:
      - backend:
          serviceName: auth-server
          servicePort: 8080
        path: /api/auth/v0(/|$)(.*)
      - backend:
          serviceName: jobs-service
          servicePort: 8080
        path: /api/jobs/v0(/|$)(.*)
      - backend:
          serviceName: logs-service
          servicePort: 8080
        path: /api/logs/v0(/|$)(.*)
      - backend:
          serviceName: tools-service
          servicePort: 8080
        path: /api/tools/v0(/|$)(.*)
      - backend:
          serviceName: configs-service
          servicePort: 8080
        path: /api/checks/v0(/|$)(.*)
      - backend:
          serviceName: configs-service
          servicePort: 8080
        path: /api/configs/v0(/|$)(.*)
      - backend:
          serviceName: pericles-swagger-ui
          servicePort: 8080
        path: /api-docs/()(.*)
      - backend:
          serviceName: cos-server
          servicePort: 8080
        path: /api/common(/|$)(.*)
      - backend:
          serviceName: tds-code-analysis
          servicePort: 8080
        path: /api/code-analysis(/|$)(.*)
      - backend:
          serviceName: issue-server
          servicePort: 8080
        path: /api/query(/|$)(.*)
      - backend:
          serviceName: issue-server
          servicePort: 8080
        path: /api/issues(/|$)(.*)
      - backend:
          serviceName: taxonomy-server
          servicePort: 8080
        path: /api/taxonomy(/|$)(.*)
      - backend:
          serviceName: triage-command-handler
          servicePort: 8080
        path: /api/triage-command(/|$)(.*)
      - backend:
          serviceName: triage-query
          servicePort: 8080
        path: /api/triage-query(/|$)(.*)
      - backend:
          serviceName: auth-server
          servicePort: 8080
        path: /api/auth(/|$)(.*)
      - backend:
          serviceName: jobs-service
          servicePort: 8080
        path: /api/jobs(/|$)(.*)
      - backend:
          serviceName: logs-service
          servicePort: 8080
        path: /api/logs(/|$)(.*)
      - backend:
          serviceName: tools-service
          servicePort: 8080
        path: /api/tools(/|$)(.*)
      - backend:
          serviceName: configs-service
          servicePort: 8080
        path: /api/checks(/|$)(.*)
      - backend:
          serviceName: configs-service
          servicePort: 8080
        path: /api/configs(/|$)(.*)
      - backend:
          serviceName: desktop-metrics-service
          servicePort: 8080
        path: /api/dms(/|$)(.*)
      - backend:
          serviceName: desktop-metrics-service
          servicePort: 8080
        path: /api/dms/v0(/|$)(.*)
      - backend:
          serviceName: upload-server
          servicePort: 9000
        path: /upload(/|$)(.*)
      - backend:
          serviceName: download-server
          servicePort: 9000
        path: /download(/|$)(.*)
      - backend:
          serviceName: vinyl-server
          servicePort: 8080
        path: /api/vinyl(/|$)(.*)
      - backend:
          serviceName: web-core
          servicePort: 8080
        path: /()(.*)
      - backend:
          serviceName: rp-frontend
          servicePort: 80
        path: /reporting(/|$)(.*)
      - backend:
          serviceName: rp-tools-portfolio-service
          servicePort: 8080
        path: /reporting/tps(/|$)(.*)
      - backend:
          serviceName: rp-issue-manager
          servicePort: 8080
        path: /reporting/im(/|$)(.*)
      - backend:
          serviceName: rp-portfolio-service
          servicePort: 8080
        path: /reporting/rpps(/|$)(.*)
      - backend:
          serviceName: rp-report-service
          servicePort: 8080
        path: /reporting/rs(/|$)(.*)
      - backend:
          serviceName: rp-swagger-doc
          servicePort: 8080
        path: /reporting/swagger(/|$)(.*)
      - backend:
          serviceName: rp-polaris-agent-service
          servicePort: 8080
        path: /reporting/pas(/|$)(.*)
      - backend:
          serviceName: web-help
          servicePort: 8080
        path: /help(/|$)(.*)
      - backend:
          serviceName: notifications-service
          servicePort: 8080
        path: /api/notifications(/|$)(.*)
  tls:
  - hosts:
    - ${POLARIS_ROOT_DOMAIN}
    secretName: swip-ingress-tls
